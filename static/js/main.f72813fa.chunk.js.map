{"version":3,"sources":["store/actions.ts","store/storeTypes.ts","components/Button/Button.tsx","types/btnTypes.ts","store/actionCreators.ts","components/BasicButtons/BasicButtons.tsx","parser/parser.ts","components/StringInput/StringInput.tsx","components/App/App.tsx","store/initialState.ts","store/reducer.ts","store/store.ts","index.tsx"],"names":["actions","useTypedSelector","useSelector","Button","model","dispatch","useDispatch","currentValue","state","curValue","lastOperation","operator","isDot","useState","value","text","setText","activeStyle","setActiveStyle","operationsToSymbols","sum","dec","mul","div","useEffect","className","style","onClick","payload","callback","console","log","ButtonVisual","setCur","val","type","perc","inv","setDot","calculate","clear","remove","ButtonModel","color","func","this","light","colored","BasicButtons","checkOperations","operation","actionCreator","BasicButtonsModel","map","button","Parser","parse","str","basis","posState","dotState","logData","parseBrackets","startedIndex","closeBracketIndex","split","findIndex","sym","index","slice","getFact","n","alert","numbers","operators","operations","a","b","Infinity","pow","Math","output","expAnswer","i","length","E","isNaN","parseInt","push","j","parsed","answer","reduce","acc","StringInput","exp","setExp","res","setRes","onChange","e","target","marginBottom","width","margin","App","stringInputMode","setStringInputMode","checked","prev","initialState","mode","prevValue","reducer","action","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f72813fa.chunk.js","sourcesContent":["enum actions {\n  setCur = 'SET_CURRENT',\n  sum = 'OP_SUM',\n  dec = 'OP_DEC',\n  mul = 'OP_MUL',\n  div = 'OP_DIV',\n  perc = 'OP_PERC',\n  inv = 'VAL_INV',\n  clear = 'VAL_CLEAR',\n  remove = 'VAL_REMOVE',\n  calculate = 'VAL_CALCULATE',\n  setDot = 'VAL_SET_DOT',\n}\n\nexport default actions\n","import { TypedUseSelectorHook, useSelector } from 'react-redux'\nimport actions from './actions'\nimport state from '../store/reducer'\n\ntype stateType = ReturnType<typeof state>\n\nexport const useTypedSelector: TypedUseSelectorHook<stateType> = useSelector\n\n\ntype modeType = 'simple' | 'extended'\nexport type operatorType = null | 'sum' | 'dec' | 'mul' | 'div' | 'perc'\n\nexport type numOrDot = number | '.'\n\nexport interface Istate {\n  mode: modeType\n  curValue: number | null\n  prevValue: number | null\n  operator: operatorType\n  isDot: Boolean\n}\n\nexport interface actionType {\n  type: actions\n  value?: numOrDot\n}\n","import React, { useEffect, useState, useRef } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useTypedSelector } from '../../store/storeTypes'\nimport { ButtonProps } from '../../types/btnTypes'\nimport './Button.scss'\n\nconst Button: React.FC<ButtonProps> = ({model}) => {\n  \n  const dispatch = useDispatch()\n  const currentValue = useTypedSelector(state => state.curValue)\n  const lastOperation = useTypedSelector(state => state.operator)\n  const isDot = useTypedSelector(state => state.isDot)\n  const [text, setText] = useState(model.value)\n  const [activeStyle, setActiveStyle] = useState(false)\n\n  const operationsToSymbols = {\n    sum: '+',\n    dec: '-',\n    mul: 'x',\n    div: '÷',\n  }\n\n  useEffect(() => {\n    if (operationsToSymbols[lastOperation] === model.value) {\n      setActiveStyle(true)\n    } else {\n      setActiveStyle(false)\n    }\n\n    if (model.value === '.' && isDot) {\n      setActiveStyle(true)\n    } else {\n      setActiveStyle(false)\n    }\n  }, [lastOperation, isDot])\n\n  useEffect(() => {\n    if (model.value === 'AC') {\n      if (currentValue) {\n        setText('C')\n      } else {\n        setText('AC')\n      }\n    }\n  }, [currentValue])\n\n  \n  \n  return (\n    <button className={`btn ${model.style} ${activeStyle ? 'selected' : ''}`} onClick={() => {\n      const payload = model.callback()\n      console.log('inside', payload)\n      dispatch(payload)\n      }}>\n      {text}\n    </button>\n  )\n}\n\nexport default Button\n","import { ButtonModel } from '../components/BasicButtons/BasicButtons'\n\nexport enum ButtonVisual {\n  light = 'btn__light',\n  dark = 'btn__dark',\n  colored = 'btn__colored',\n}\n\nexport interface ButtonProps {\n  model: ButtonModel,\n  //callback: Function\n}\n","import actions from './actions'\nimport { actionType, numOrDot } from './storeTypes'\n\nexport const setCur = (val: numOrDot): actionType => {\n  return {\n    type: actions.setCur,\n    value: val,\n  }\n}\n\nexport const sum = (): actionType => {\n  return {\n    type: actions.sum,\n  }\n}\nexport const dec = (): actionType => {\n  return {\n    type: actions.dec,\n  }\n}\nexport const mul = (): actionType => {\n  return {\n    type: actions.mul,\n  }\n}\nexport const div = (): actionType => {\n  return {\n    type: actions.div,\n  }\n}\nexport const perc = (): actionType => {\n  return {\n    type: actions.perc,\n  }\n}\nexport const inv = (): actionType => {\n  return {\n    type: actions.inv,\n  }\n}\nexport const setDot = (): actionType => {\n  return {\n    type: actions.setDot,\n  }\n}\nexport const calculate = (): actionType => {\n  return {\n    type: actions.calculate\n  }\n}\nexport const clear = (): actionType => {\n  return {\n    type: actions.clear\n  }\n}\nexport const remove = (): actionType => {\n  return {\n    type: actions.remove\n  }\n}\n","import React from 'react'\nimport { useTypedSelector, operatorType, actionType } from '../../store/storeTypes'\nimport Button from '../Button/Button'\nimport * as actionCreator from '../../store/actionCreators'\nimport { ButtonVisual } from '../../types/btnTypes'\nimport './BasicButtons.scss'\nimport { useDispatch } from 'react-redux'\n\nexport class ButtonModel {\n  value: string\n  style: ButtonVisual\n  callback: Function\n\n  constructor(value: string, color: string, func: Function) {\n    this.value = value\n    this.style = color === 'light' ? ButtonVisual.light : ButtonVisual.colored\n    this.callback = func\n  }\n}\n\nconst BasicButtons: React.FC = () => {\n\n  const value = useTypedSelector(state => state.curValue)\n  const lastOperation = useTypedSelector(state => state.operator)\n  const dispatch = useDispatch()\n\n  const checkOperations = (operation: operatorType, callback: Function) => {\n    console.log('checking')\n    if (lastOperation !== operation && lastOperation) {\n      dispatch(actionCreator[lastOperation]())\n    }\n    return callback()\n  }\n\n  const calculateValue = (): actionType => {\n    if (lastOperation) {\n      const callback = actionCreator[lastOperation]()\n      console.log(callback)\n      dispatch(callback)\n    }\n    return actionCreator.calculate()\n  }\n\n  const checkRemove = () => {\n    if (value) return actionCreator.remove()\n    else return actionCreator.clear()\n  }\n\n  const BasicButtonsModel: ButtonModel[] = [\n    new ButtonModel('AC', 'lighter', checkRemove),\n    new ButtonModel('±', 'lighter', actionCreator.inv),\n    new ButtonModel('%', 'lighter', actionCreator.perc),\n    new ButtonModel('÷', 'colored', () => checkOperations('div', actionCreator.div)),\n    new ButtonModel('1', 'light', () => actionCreator.setCur(1)),\n    new ButtonModel('2', 'light', () => actionCreator.setCur(2)),\n    new ButtonModel('3', 'light', () => actionCreator.setCur(3)),\n    new ButtonModel('x', 'colored', () => checkOperations('mul', actionCreator.mul)),\n    new ButtonModel('4', 'light', () => actionCreator.setCur(4)),\n    new ButtonModel('5', 'light', () => actionCreator.setCur(5)),\n    new ButtonModel('6', 'light', () => actionCreator.setCur(6)),\n    new ButtonModel('+', 'colored', () => checkOperations('sum', actionCreator.sum)),\n    new ButtonModel('7', 'light', () => actionCreator.setCur(7)),\n    new ButtonModel('8', 'light', () => actionCreator.setCur(8)),\n    new ButtonModel('9', 'light', () => actionCreator.setCur(9)),\n    new ButtonModel('-', 'colored', () => checkOperations('dec', actionCreator.dec)),\n    new ButtonModel('0', 'light', () => actionCreator.setCur(0)),\n    new ButtonModel('.', 'light', actionCreator.setDot),\n    new ButtonModel('=', 'colored', calculateValue),\n  ]\n\n  return (\n    <div>\n      <p>{value ? value : '_'}</p>\n      <div className='basicButtons'>\n        {BasicButtonsModel.map(button => {\n          return (\n            <Button key={button.value} model={button} />\n          )\n        })}\n      </div>\n    </div>\n    \n  )\n} \n\nexport default BasicButtons\n","interface parseBracketsReturn {\n  val: string\n  index: number\n}\n\ntype operation = 'sum' | 'dec' | 'mul' | 'div' | 'pow'\n\ninterface parseReturn {\n  numbers: number[]\n  operators: operation[]\n  expAnswer: number\n}\n\ninterface operationsReturn {\n  sum(a: number, b: number): number,\n  dec(a: number, b: number): number,\n  mul(a: number, b: number): number,\n  div(a: number, b: number): number,\n  pow(a: number, b: number): number,\n}\n\nconst Parser = () => {\n  return {\n    parse: (str: string): parseReturn => {\n      const currentValue = {\n        val: 0,\n        posState: 1,\n        dotState: 0,\n        logData: {\n          basis: null,\n          value: null,\n        }\n      }\n\n      const parseBrackets = (str: string, startedIndex: number): parseBracketsReturn => {\n        const closeBracketIndex = str.split('').findIndex((sym: string, index: number) => sym === ')' && index > startedIndex)\n        return {\n          val: str.slice(startedIndex + 1, closeBracketIndex),\n          index: closeBracketIndex\n        }\n      }\n\n      const calculateLog = (basis: number, value: number): number => {\n        return Math.log(value) / Math.log(basis)\n      }\n\n      const getFact = (n: number): number => {\n        if (n % 1 !== 0) {\n          alert(`n isn't integer`)\n          return -1\n        } else {\n          return (n === 1) ? n : n * getFact(n - 1)\n        }\n      }\n      \n      const numbers: number[] = []\n      const operators: operation[] = []\n      \n      const operations: operationsReturn = {\n        sum: (a: number, b: number) => {\n          return a + b\n        },\n        dec: (a: number, b: number) => {\n          return a - b\n        },\n        mul: (a: number, b: number) => {\n          return a * b\n        },\n        div: (a: number, b: number) => {\n          return b === 0 ? -Infinity : a / b\n        },\n        pow: (a: number, b: number) => {\n          return Math.pow(a, b)\n        }\n      }\n\n      const output = {\n        numbers: numbers,\n        operators: operators,\n        expAnswer: 0,\n      }\n\n  \n      for (let i = 0; i < str.length; i++) {\n        let sym = str[i]\n\n        if (sym === '.' || sym === ',') {\n          currentValue.dotState = 10\n          continue\n        }\n\n        if (str[i] === 'e') {\n          currentValue.val = Math.E\n        }\n\n        if (!isNaN(parseInt(sym, 10))) {\n          if (currentValue.dotState === 0) {\n            if (currentValue.val === 0) {\n              currentValue.val += parseInt(sym, 10) * currentValue.posState\n            } else {\n              currentValue.val = currentValue.val * 10 + parseInt(sym, 10) * currentValue.posState\n            }\n          } else if (currentValue.dotState === 10) {\n            currentValue.val = +(`${currentValue.val}.${parseInt(sym, 10)}`)\n            currentValue.dotState *= 10\n          } else {\n            currentValue.val = +(`${currentValue.val}${parseInt(sym, 10)}`)\n            currentValue.dotState *= 10\n          }\n        }\n\n        if (sym === '+') {\n          operators.push('sum')\n          numbers.push(currentValue.val)\n          currentValue.val = 0\n          currentValue.posState = 1\n          currentValue.dotState = 0\n        }\n        if (sym === '-' && i !== 0) {\n          operators.push('dec')\n          numbers.push(currentValue.val)\n          currentValue.val = 0\n          currentValue.posState = 1\n          currentValue.dotState = 0\n        }\n        if (sym === '-' && (i === 0 || str[i - 1] === '(')) {\n          currentValue.posState = -1\n        }\n\n        if (sym === '!' ) {\n          currentValue.val = getFact(currentValue.val)\n        }\n\n        if (sym === 'l') {\n          if (`${str[i + 1]}${str[i + 2]}` === 'og') {\n            for (let j = i + 3; j < str.length; j++) {\n              if (!isNaN(parseInt(str[j], 10)) || str[j] === '.' || str[j] === ',' || str[j] === '-') {\n                currentValue.logData.basis = currentValue.logData.basis\n                  ? `${currentValue.logData.basis}${str[j]}`\n                  : str[j]\n              } else {\n                i = j - 1\n                break\n              } \n            }\n          }\n          if (str[i + 1] === 'n') {\n            currentValue.logData.basis = Math.E\n            i++\n          }\n          if (str[i + 1] === 'g') {\n            currentValue.logData.basis = 10\n            i++\n          }\n          if (str[i + 1] === 'b') {\n            currentValue.logData.basis = 2\n            i++\n          }\n        }\n\n        if (sym === '(' && currentValue.logData.basis === null) {\n          const parsed = parseBrackets(str, i)\n          const val = parsed.val\n          const answer = Parser().parse(val)\n\n          if (i !== 0 && currentValue.val === 0) {\n            currentValue.val = answer.expAnswer\n          } \n          if (i === 0 && str.length === parsed.index + 1) {\n            output.numbers = [...answer.numbers]\n            output.operators = [...answer.operators]\n            output.expAnswer = answer.expAnswer\n          } else if (i === 0 && str.length > parsed.index) {\n            currentValue.val = answer.expAnswer\n          }\n          if (i !== 0 && output.numbers.length === 0) {\n            output.numbers.push(output.expAnswer)\n          } else if (i !== 0 && output.numbers.length === 2) {\n            output.numbers = [...output.numbers, answer.expAnswer]\n          }\n\n          i = parsed.index\n        }\n\n        if (sym === '(' && currentValue.logData.basis !== null) {\n          const parsed = parseBrackets(str, i)\n          const val = parsed.val\n          const answer = Parser().parse(val)\n\n          currentValue.logData.value = answer.expAnswer\n          const log = calculateLog(currentValue.logData.basis, currentValue.logData.value)\n\n          if (parsed.index === str.length - 1) {\n            output.numbers.push(log)\n          }\n\n          currentValue.val = log\n          currentValue.logData.basis = null\n          currentValue.logData.value = null\n\n          i = parsed.index\n          continue\n        }\n\n        if (sym === '*') {\n          operators.push('mul')\n          numbers.push(currentValue.val)\n          currentValue.val = 0\n          currentValue.posState = 1\n          currentValue.dotState = 0\n        }\n\n        if (sym === '^') {\n          operators.push('pow')\n          numbers.push(currentValue.val)\n          currentValue.val = 0\n          currentValue.posState = 1\n          currentValue.dotState = 0\n        }\n\n        if (sym === '/') {\n          operators.push('div')\n          numbers.push(currentValue.val)\n          currentValue.val = 0\n          currentValue.posState = 1\n          currentValue.dotState = 0\n        }\n\n        if (i === str.length - 1) {\n          numbers.push(currentValue.val)\n        }\n      }\n  \n      if (operators.length > 1) {\n        const answer = operators.reduce((acc, operation, index) => {\n          output.expAnswer = output.expAnswer !== 0 ? output.expAnswer : acc \n          acc = operations[operation](output.expAnswer, output.numbers[index + 1])\n          output.expAnswer = acc\n          return acc\n        }, output.numbers[0])\n\n        output.expAnswer = answer\n      }\n\n      if (operators.length === 1) {\n        const answer = operators.reduce((acc, operation, index) => {\n          output.expAnswer = output.expAnswer !== 0 ? output.expAnswer : acc \n          acc = operations[operation](output.expAnswer, output.numbers[index + 1])\n          output.expAnswer = acc\n\n          return acc\n        }, numbers[0])\n\n        output.expAnswer = answer\n      }\n\n      if (operators.length === 0 && !output.expAnswer) {\n        output.expAnswer = currentValue.val\n      }\n\n      return output   //temporary\n\n\n      // return output.expAnswer    //return number value equal to answer of input expression\n    }\n  }\n}\n\nexport default Parser\n","import React, { useState } from 'react'\nimport Parser from '../../parser/parser'\n\nconst StringInput = () => {\n\n  const parse = Parser().parse\n  const [exp, setExp] = useState('')\n  const [res, setRes] = useState(null)\n\n  return ( \n    <div>\n      <input type='text' value={exp} onChange={(e) => setExp(e.target.value)} />\n      <button onClick={() => setRes(parse(exp).expAnswer)}>Calculate</button>\n      <p style={{marginBottom: '3rem'}}>Result: {res}</p>\n      <ul style={{width: 'fit-content', margin: '0 auto'}}>Формальный синтаксис и ограничения:\n        <li>Простые арифметические операции: <strong>a+b-c*d/e</strong></li>\n        <li>Операции вычисляются <strong>в порядке указания!</strong> (нет приоритета умножения, деления, и тд)</li>\n        <li>Скобки (пока только 1 уровень вложенности): <strong>(a+b)-(c*d)</strong></li>\n        <li>Возведение в степень: <strong>x^y</strong></li>\n        <li>Факториал: <strong>x!</strong></li>\n        <li>\n          <ul>\n            Логарифмы (пока строго вне скобок и без выражений в значении): \n            <li>Логарифм от x по основанию y: <strong>logy(x)</strong></li>\n            <li>Натуральный логарифм от х: <strong>ln(x)</strong></li>\n            <li>Логарифм от х по оcнованию 10: <strong>lg(x)</strong></li>\n            <li>Логарифм от х по оcнованию 2: <strong>lb(x)</strong></li>\n          </ul>\n        </li>\n      </ul>\n    </div>\n  )\n}\n\nexport default StringInput\n","import React, {useState} from 'react'\nimport BasicButtons from '../BasicButtons/BasicButtons'\nimport StringInput from '../StringInput/StringInput'\nimport './App.css'\n\nfunction App() {\n  const [stringInputMode, setStringInputMode] = useState(false)\n  return (\n    <div className=\"App\">\n      <input type='checkbox' checked={stringInputMode} onChange={() => setStringInputMode(prev => !prev)}/>\n      {stringInputMode && <StringInput />}\n      {!stringInputMode && <BasicButtons />}\n    </div>\n  )\n}\n\nexport default App\n","import { Istate } from './storeTypes'\n\nconst initialState: Istate = {\n  mode: 'simple',\n  curValue: null,\n  prevValue: null,\n  operator: null,\n  isDot: false,\n}\n\nexport default initialState\n","import initialState from './initialState'\nimport { Istate, actionType } from './storeTypes'\nimport actions from './actions'\n\nconst reducer = (state = initialState, action: actionType): Istate => {\n  switch (action.type) {\n\n    case actions.setCur:\n      if (state.operator && !state.prevValue) {\n        return {\n          ...state,\n          prevValue: state.curValue,\n          curValue: action.value !== '.' ? action.value! : null,\n        }\n      }\n      if (state.isDot) {\n        return {\n          ...state,\n          curValue: +(`${state.curValue}.${action.value}`),\n          isDot: false,\n        }\n      }\n      return {\n        ...state,\n        curValue: +(`${state.curValue ?? ''}${action.value}`)\n      }\n    case actions.sum:\n      if (state.prevValue) {\n        return {\n          ...state,\n          curValue: state.curValue + state.prevValue,\n          prevValue: null,\n          operator: 'sum'\n        }\n      }\n      return {\n        ...state,\n        prevValue: state.curValue,\n        curValue: null,\n        operator: 'sum',\n      }\n\n    case actions.dec:\n      if (state.prevValue) {\n        return {\n          ...state,\n          curValue: state.prevValue - state.curValue,\n          prevValue: null,\n          operator: 'dec'\n        }\n      }\n      return {\n        ...state,\n        prevValue: state.curValue,\n        curValue: null,\n        operator: 'dec',\n      }\n\n    case actions.mul:\n      if (state.prevValue) {\n        return {\n          ...state,\n          curValue: state.prevValue * state.curValue,\n          prevValue: null,\n          operator: 'mul'\n        }\n      }\n      return {\n        ...state,\n        prevValue: state.curValue,\n        curValue: null,\n        operator: 'mul',\n      }\n\n    case actions.div:\n      if (state.prevValue) {\n        return {\n          ...state,\n          curValue: state.prevValue / state.curValue,\n          prevValue: null,\n          operator: 'div'\n        }\n      }\n      return {\n        ...state,\n        prevValue: state.curValue,\n        curValue: null,\n        operator: 'div',\n      }\n\n    case actions.perc:\n      if (state.prevValue) {\n        return {\n          ...state,\n          curValue: (state.prevValue / 100) * state.curValue,\n        }\n      }\n      return {\n        ...state,\n        curValue: state.curValue / 100,\n      }\n\n    case actions.inv:\n      return {\n        ...state,\n        curValue: state.curValue * (-1)\n      }\n\n    case actions.setDot:\n      return {\n        ...state,\n        isDot: true,\n      }\n\n    case actions.calculate:\n      return {\n        ...state,\n        operator: null,\n      }\n    \n    case actions.clear:\n      return {\n        ...state,\n        curValue: null,\n        prevValue: null,\n        operator: null,\n      }\n\n    case actions.remove:\n      return {\n        ...state,\n        curValue: +(`${state.curValue}`.slice(0, -1)),\n      }\n\n    default:\n      return state\n  }\n}\n\nexport default reducer\n","import { createStore } from 'redux'\nimport reducer from './reducer'\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(reducer, composeWithDevTools())\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App/App'\nimport { Provider } from 'react-redux'\nimport store from './store/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}